// Bytecode opcodes (just to run the current class file, not all the opcodes are supported for now)
#[derive(Debug, Clone, Copy)]
#[allow(non_camel_case_types)]
pub enum Opcode {
    Iconstm1 = 0x02,      // 2
    Iconst0 = 0x03,       // 3
    Iconst1 = 0x04,       // 4
    Iconst2 = 0x05,       // 5
    Iconst3 = 0x06,       // 6
    Iconst4 = 0x07,       // 7
    Iconst5 = 0x08,       // 8
    Bipush = 0x10,        // 16
    Sipush = 0x11,        // 17
    Ldc = 0x12,           // 18
    Ldc2_w = 0x14,        // 20
    Iload = 0x15,         // 21
    Lload = 0x16,         // 22
    Fload = 0x17,         // 23
    Dload = 0x18,         // 24
    Iload0 = 0x1A,        // 26
    Iload1 = 0x1B,        // 27
    Iload2 = 0x1C,        // 28
    Iload3 = 0x1D,        // 29
    Lload0 = 0x1E,        // 30
    Lload1 = 0x1F,        // 31
    Lload2 = 0x20,        // 32
    Lload3 = 0x21,        // 33
    Fload0 = 0x22,        // 34
    Fload1 = 0x23,        // 35
    Fload2 = 0x24,        // 36
    Fload3 = 0x25,        // 37
    Dload0 = 0x26,        // 38
    Dload1 = 0x27,        // 39
    Dload2 = 0x28,        // 40
    Dload3 = 0x29,        // 41
    Aload = 0x19,         // 25
    Aload_0 = 0x2A,       // 42
    Aload_1 = 0x2B,       // 43
    Aload_2 = 0x2C,       // 44
    Aload_3 = 0x2D,       // 45
    Aaload = 0x32,        // 50
    Istore = 0x36,        // 54
    Lstore = 0x37,        // 55
    Fstore = 0x38,        // 56
    Dstore = 0x39,        // 57
    Istore_0 = 0x3B,      // 59
    Istore_1 = 0x3C,      // 60
    Istore_2 = 0x3D,      // 61
    Istore_3 = 0x3E,      // 62
    Lstore_0 = 0x3F,      // 63
    Lstore_1 = 0x40,      // 64
    Lstore_2 = 0x41,      // 65
    Lstore_3 = 0x42,      // 66
    Fstore_0 = 0x43,      // 67
    Fstore_1 = 0x44,      // 68
    Fstore_2 = 0x45,      // 69
    Fstore_3 = 0x46,      // 70
    Dstore_0 = 0x47,      // 71
    Dstore_1 = 0x48,      // 72
    Dstore_2 = 0x49,      // 73
    Dstore_3 = 0x4A,      // 74
    Iadd = 0x60,          // 96
    Ladd = 0x61,          // 97
    Fadd = 0x62,          // 98
    Dadd = 0x63,          // 99
    Isub = 0x64,          // 100
    Lsub = 0x65,          // 101
    Fsub = 0x66,          // 102
    Dsub = 0x67,          // 103
    Imul = 0x68,          // 104
    Lmul = 0x69,          // 105
    Fmul = 0x6A,          // 106
    Dmul = 0x6B,          // 107
    Idiv = 0x6C,          // 108
    Ldiv = 0x6D,          // 109
    Fdiv = 0x6E,          // 110
    Ddiv = 0x6F,          // 111
    Irem = 0x70,          // 112
    Lrem = 0x71,          // 113
    Frem = 0x72,          // 114
    Drem = 0x73,          // 115
    Ineg = 0x74,          // 116
    Lneg = 0x75,          // 117
    Fneg = 0x76,          // 118
    Dneg = 0x77,          // 119
    Iinc = 0x84,          // 132
    F2i = 0x8B,           // 139
    F2l = 0x8C,           // 140
    F2d = 0x8D,           // 141
    D2i = 0x8E,           // 142
    D2l = 0x8F,           // 143
    D2f = 0x90,           // 144
    Ifeq = 0x99,          // 153
    Ifne = 0x9A,          // 154
    Iflt = 0x9B,          // 155
    Ifge = 0x9C,          // 156
    Ifgt = 0x9D,          // 157
    Ifle = 0x9E,          // 158
    If_icmpeq = 0x9F,     // 159
    If_icmpne = 0xA0,     // 160
    If_icmplt = 0xA1,     // 161
    If_icmpge = 0xA2,     // 162
    If_icmpgt = 0xA3,     // 163
    If_icmple = 0xA4,     // 164
    Return = 0xB1,        // 177
    Getstatic = 0xB2,     // 178
    Putstatic = 0xB3,     // 179
    Invokevirtual = 0xB6, // 182
    Invokespecial = 0xB7, // 183
    Invokestatic = 0xB8,  // 184
}

impl From<u8> for Opcode {
    fn from(byte: u8) -> Self {
        match byte {
            0x02 => Opcode::Iconstm1,
            0x03 => Opcode::Iconst0,
            0x04 => Opcode::Iconst1,
            0x05 => Opcode::Iconst2,
            0x06 => Opcode::Iconst3,
            0x07 => Opcode::Iconst4,
            0x08 => Opcode::Iconst5,
            0x10 => Opcode::Bipush,
            0x11 => Opcode::Sipush,
            0x12 => Opcode::Ldc,
            0x14 => Opcode::Ldc2_w,
            0x15 => Opcode::Iload,
            0x16 => Opcode::Lload,
            0x17 => Opcode::Fload,
            0x18 => Opcode::Dload,
            0x1A => Opcode::Iload0,
            0x1B => Opcode::Iload1,
            0x1C => Opcode::Iload2,
            0x1D => Opcode::Iload3,
            0x1E => Opcode::Lload0,
            0x1F => Opcode::Lload1,
            0x20 => Opcode::Lload2,
            0x21 => Opcode::Lload3,
            0x22 => Opcode::Fload0,
            0x23 => Opcode::Fload1,
            0x24 => Opcode::Fload2,
            0x25 => Opcode::Fload3,
            0x26 => Opcode::Dload0,
            0x27 => Opcode::Dload1,
            0x28 => Opcode::Dload2,
            0x29 => Opcode::Dload3,
            0x19 => Opcode::Aload,
            0x2A => Opcode::Aload_0,
            0x2B => Opcode::Aload_1,
            0x2C => Opcode::Aload_2,
            0x2D => Opcode::Aload_3,
            0x32 => Opcode::Aaload,
            0x36 => Opcode::Istore,
            0x37 => Opcode::Lstore,
            0x38 => Opcode::Fstore,
            0x39 => Opcode::Dstore,
            0x3B => Opcode::Istore_0,
            0x3C => Opcode::Istore_1,
            0x3D => Opcode::Istore_2,
            0x3E => Opcode::Istore_3,
            0x3F => Opcode::Lstore_0,
            0x40 => Opcode::Lstore_1,
            0x41 => Opcode::Lstore_2,
            0x42 => Opcode::Lstore_3,
            0x43 => Opcode::Fstore_0,
            0x44 => Opcode::Fstore_1,
            0x45 => Opcode::Fstore_2,
            0x46 => Opcode::Fstore_3,
            0x47 => Opcode::Dstore_0,
            0x48 => Opcode::Dstore_1,
            0x49 => Opcode::Dstore_2,
            0x4A => Opcode::Dstore_3,
            0x60 => Opcode::Iadd,
            0x61 => Opcode::Ladd,
            0x62 => Opcode::Fadd,
            0x63 => Opcode::Dadd,
            0x64 => Opcode::Isub,
            0x65 => Opcode::Lsub,
            0x66 => Opcode::Fsub,
            0x67 => Opcode::Dsub,
            0x68 => Opcode::Imul,
            0x69 => Opcode::Lmul,
            0x6A => Opcode::Fmul,
            0x6B => Opcode::Dmul,
            0x6C => Opcode::Idiv,
            0x6D => Opcode::Ldiv,
            0x6E => Opcode::Fdiv,
            0x6F => Opcode::Ddiv,
            0x70 => Opcode::Irem,
            0x71 => Opcode::Lrem,
            0x72 => Opcode::Frem,
            0x73 => Opcode::Drem,
            0x74 => Opcode::Ineg,
            0x75 => Opcode::Lneg,
            0x76 => Opcode::Fneg,
            0x77 => Opcode::Dneg,
            0x84 => Opcode::Iinc,
            0x8B => Opcode::F2i,
            0x8C => Opcode::F2l,
            0x8D => Opcode::F2d,
            0x8E => Opcode::D2i,
            0x8F => Opcode::D2l,
            0x90 => Opcode::D2f,
            0x99 => Opcode::Ifeq,
            0x9A => Opcode::Ifne,
            0x9B => Opcode::Iflt,
            0x9C => Opcode::Ifge,
            0x9D => Opcode::Ifgt,
            0x9E => Opcode::Ifle,
            0x9F => Opcode::If_icmpeq,
            0xA0 => Opcode::If_icmpne,
            0xA1 => Opcode::If_icmplt,
            0xA2 => Opcode::If_icmpge,
            0xA3 => Opcode::If_icmpgt,
            0xA4 => Opcode::If_icmple,
            0xB1 => Opcode::Return,
            0xB2 => Opcode::Getstatic,
            0xB3 => Opcode::Putstatic,
            0xB6 => Opcode::Invokevirtual,
            0xB7 => Opcode::Invokespecial,
            0xB8 => Opcode::Invokestatic,
            _ => panic!("Unknown opcode: 0x{:02X}", byte),
        }
    }
}
